version: '2.1'

services:

  product:
    build: product-service
    image: svendesmit/springbootmicroservices2-product:v1
    mem_limit: 512m
    ports:
      - "8081:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0,kafka
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy        
      admin:
        condition: service_healthy        

  recommendation:
    build: recommendation-service
    image: svendesmit/springbootmicroservices2-recommendation:v1
    mem_limit: 512m
    ports:
      - "8082:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0,kafka
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
      admin:
        condition: service_healthy        

  review:
    build: review-service
    image: svendesmit/springbootmicroservices2-review:v1
    mem_limit: 512m
    ports:
      - "8083:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0,kafka
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
      admin:
        condition: service_healthy        

  product-composite:
    build: product-composite-service
    image: svendesmit/springbootmicroservices2-product-composite:v1
    mem_limit: 512m
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,kafka
    depends_on:
      kafka:
        condition: service_healthy
      admin:
        condition: service_healthy        

  mysql:
    image: mysql:8.0.31
    mem_limit: 512m
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=rootpwd
      - MYSQL_DATABASE=review-db
      - MYSQL_USER=user
      - MYSQL_PASSWORD=pwd
    healthcheck:
      test: "/usr/bin/mysql --user=user --password=pwd --execute \"SHOW DATABASES;\""
      interval: 5s
      timeout: 2s
      retries: 60
      
  mongodb:
    image: mongo:6.0.3
    mem_limit: 512m
    ports:
      - "27017:27017"
    command: mongod
    healthcheck:
      #test: "mongo --eval 'db.stats().ok === 1'"
      #test: echo 'db.stats().ok' | mongo localhost:27017 --quiet
      #test: bash -c "if mongo --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)'; then exit 0; fi; exit 1;"
      test: "mongosh 'mongodb://localhost:27017' --norc --quiet --eval 'db.getMongo()'"
      interval: 10s
      timeout: 10s
      retries: 5
     
  admin:
    image: slydeveloper/spring-boot-admin
    environment:
      - SPRING_BOOT_ADMIN_TITLE=My Spring Boot Admin
    # - SPRING_BOOT_ADMIN_USER_NAME=user
    # - SPRING_BOOT_ADMIN_USER_PASSWORD=password
    # - SPRING_BOOT_ADMIN_SECURITY_ENABLED=false
    volumes:
      - ./application-docker.properties:/opt/spring-boot-admin-docker/application-docker.properties
    ports:
      - 1111:1111
    healthcheck:
      test: "curl -sS http://localhost:1111/health"
      interval: 1s
      timeout: 60s
      retries: 120
    container_name: spring_boot_admin_docker

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
  
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
        test: nc -z localhost 9092 || exit -1
        start_period: 15s
        interval: 5s
        timeout: 10s
        retries: 10


  rabbitmq:
    image: rabbitmq:3.11.7-management
    mem_limit: 512m
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 2s
      retries: 60
      
